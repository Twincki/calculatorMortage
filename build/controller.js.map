{"version":3,"sources":["util/logger/Logger.js","util/invariable.js","../model/model.js","util/updateModel.js","view/radioPrograms.js","util/roundNumber.js","util/computation.js","util/utils.js","util/applicationForm.js","view/choiceOfConditions/costInput.js","view/choiceOfConditions/costRange.js","view/choiceOfConditions/paymentInput.js","util/debounce/debounce.js","view/choiceOfConditions/paymentRange.js","view/choiceOfConditions/timeInput.js","view/choiceOfConditions/timeRange.js","controller.js"],"names":["Logger","_classCallCheck","_createClass","key","value","_console","_len","arguments","length","messages","Array","_key","console","log","apply","concat","Error","stack","split","trim","_console2","_len2","_key2","_console3","_len3","_key3","_console4","_len4","_key4","exports","UPDATE_FORM_EVENT","UPDATE_EVENTS","INPUT_COST","SLIDER_COST","INPUT_PAYMENT","SLIDER_PAYMENT","INPUT_TIME","SLIDER_TIME","NULL","RADIO_PROGRAM","ZERO_VALUE","_Logger","require","_invariable","_typeof","obj","Symbol","iterator","constructor","prototype","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","target","i","source","forEach","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","toPrimitive","undefined","res","call","TypeError","Number","data","selectedProgram","cost","minPrice","maxPrice","minPaymentsPercent","maxPaymentsPercent","paymentsPercent","payment","time","maxTime","minTime","getMinPayment","getMaxPayment","onUpdate","programs","base","it","gov","zero","getData","setDate","newData","id","parseInt","success","updateModel","element","dispatchEvent","CustomEvent","bubbles","detail","_default","default","_updateModel","_interopRequireDefault","__esModule","init","radioBtns","document","querySelectorAll","_getData$programs","querySelector","textContent","radioBtn","addEventListener","info","parseFloat","error","roundNumber","number","locale","Intl","NumberFormat","style","currency","maximumFractionDigits","format","_roundNumber","computation","months","totalCost","mothRate","generalRate","Math","pow","totalMonthPayment","totalOverpayment","updateMinPercents","_regeneratorRuntime","Op","hasOwn","hasOwnProperty","desc","$Symbol","iteratorSymbol","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","type","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","method","_invoke","AsyncIterator","PromiseImpl","previousPromise","callInvokeWithMethodAndArg","resolve","reject","invoke","record","result","__await","then","unwrapped","state","doneResult","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","done","methodName","return","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","val","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","catch","_catch","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","form","openFormBtn","orderForm","submitFormBtn","classList","remove","add","event","preventDefault","formData","FormData","_fetchData","_callee","url","checkOnUrl","response","_callee$","_context","_checkOnUrl","urlArrayDot","newUrl","join","urlArraySlash","location","href","fetch","headers","body","JSON","stringify","get","email","phone","text","removeAttribute","innerText","getElementById","setAttribute","fetchData","_getData","cleaveInput","Cleave","numeral","numeralThousandsGroupStyle","delimiter","setRawValue","getRawValue","closest","slider","noUiSlider","start","connect","tooltips","step","range","min","max","wNumb","decimals","thousand","suffix","on","firstValue","removeSpaces","replace","minPayment","maxPayment","debounce","func","timer","delay","clearTimeout","setTimeout","_debounce","debounceUiSlider","Model","_interopRequireWildcard","_radioPrograms","_computation","_utils","_applicationForm","_costInput","_costRange","_paymentInput","_paymentRange","_timeInput","_timeRange","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","cache","has","newObj","hasPropertyDescriptor","set","initialCalculator","applicationForm","cleaveCost","costInput","sliderCost","costRange","cleavePayment","paymentInput","sliderPayment","paymentRange","cleaveTime","timeInput","sliderTime","timeSlider","_ref","_ref2","updateOptions","updateForm"],"mappings":"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","file":"controller.js","sourceRoot":"..\\js","sourcesContent":["export class Logger {\r\n  static info(...messages) {\r\n    console.log(\r\n      \"%c[INFO]\",\r\n      \"color: #42aaff\",\r\n      `(${new Error().stack.split(\"\\n\")[2].trim().split(\" \")[1]})`,\r\n      ...messages\r\n    );\r\n  }\r\n\r\n  static success(...messages) {\r\n    console.log(\r\n      \"%c[SUCCESS]\",\r\n      \"color: #50c878\",\r\n      `(${new Error().stack.split(\"\\n\")[2].trim().split(\" \")[1]})`,\r\n      ...messages\r\n    );\r\n  }\r\n\r\n  static error(...messages) {\r\n    console.log(\r\n      \"%c[ERROR]\",\r\n      \"color: #ff0000\",\r\n      `(${new Error().stack.split(\"\\n\")[2].trim().split(\" \")[1]})`,\r\n      ...messages\r\n    );\r\n  }\r\n\r\n  static warn(...messages) {\r\n    console.log(\r\n      \"%c[WARN]\",\r\n      \"color: #ffa500\",\r\n      `(${new Error().stack.split(\"\\n\")[2].trim().split(\" \")[1]})`,\r\n      ...messages\r\n    );\r\n  }\r\n}\r\n","export const UPDATE_FORM_EVENT = 'updateForm';\r\n\r\n// События для обновления updateModel\r\nexport const UPDATE_EVENTS = {\r\n  // Стоимость недвижимости\r\n  INPUT_COST: \"inputCost\",\r\n  SLIDER_COST: \"sliderCost\",\r\n\r\n  // Первоначальный взнос\r\n  INPUT_PAYMENT: \"inputPayment\",\r\n  SLIDER_PAYMENT: \"sliderPayment\",\r\n\r\n  // Срок кредита\r\n  INPUT_TIME: \"inputTime\",\r\n  SLIDER_TIME: \"sliderTime\",\r\n\r\n  NULL: \"\",\r\n  RADIO_PROGRAM: \"radioProgram\",\r\n  ZERO_VALUE: \"zero-value\",\r\n};\r\n","import { Logger } from \"../js/util/logger/Logger.js\";\r\nimport { UPDATE_EVENTS } from \"../js/util/invariable.js\";\r\n\r\nlet data = {\r\n  selectedProgram: 0.1,\r\n  cost: 12000000,\r\n  minPrice: 375000,\r\n  maxPrice: 100000000,\r\n  minPaymentsPercent: 0.15,\r\n  maxPaymentsPercent: 0.9,\r\n  paymentsPercent: 0.5,\r\n  payment: 6000000,\r\n  time: 10,\r\n  maxTime: 30,\r\n  minTime: 1,\r\n  getMinPayment: () => data.cost * data.minPaymentsPercent,\r\n  getMaxPayment: () => data.cost * data.maxPaymentsPercent,\r\n  onUpdate: UPDATE_EVENTS.NULL,\r\n  programs: {\r\n    base: 0.1,\r\n    it: 0.047,\r\n    gov: 0.046,\r\n    zero: 0.12,\r\n  },\r\n};\r\n\r\nfunction getData() {\r\n  return { ...data };\r\n}\r\n\r\nfunction setDate(newData) {\r\n  if (newData.onUpdate === UPDATE_EVENTS.RADIO_PROGRAM) {\r\n\r\n    if (newData.id === UPDATE_EVENTS.ZERO_VALUE) {\r\n      data.minPaymentsPercent = 0;\r\n    } else {\r\n      data.minPaymentsPercent = 0.15;\r\n    }\r\n  }\r\n\r\n  if (newData.onUpdate === UPDATE_EVENTS.INPUT_COST || newData.onUpdate === UPDATE_EVENTS.SLIDER_COST) {\r\n    // Обновление цены базовых значений стоимости недвижимости -------------------------\r\n    // Если стоимость меньше минимальной цены\r\n    if (newData.cost < data.minPrice) newData.cost = data.minPrice;\r\n    // Если стоимость больше максимальной цены\r\n    if (newData.cost > data.maxPrice) newData.cost = data.maxPrice;\r\n    // ----------------------------------------------------------\r\n\r\n    // Обновление цены новых значений первоначального взноса -------------------------\r\n    // Если стоимость меньше минимальной цены\r\n    if (data.payment > data.getMaxPayment()) data.payment = data.getMaxPayment();\r\n    // Если стоимость больше максимальной цены\r\n    if (data.payment < data.getMinPayment()) data.payment = data.getMinPayment()\r\n    // ----------------------------------------------------------\r\n\r\n    // Обновление слайдера payment при изменении слайдера cost\r\n    data.paymentsPercent = (data.payment * 100) / newData.cost / 100\r\n  }\r\n\r\n\r\n  if (newData.onUpdate === UPDATE_EVENTS.INPUT_PAYMENT) {\r\n    // Пересчитываем проценты %\r\n    newData.paymentsPercent = (newData.payment * 100) / data.cost\r\n\r\n    // Если проценты больше допустимых значений \r\n    if (newData.paymentsPercent > data.maxPaymentsPercent) {\r\n      newData.paymentsPercent = data.maxPaymentsPercent\r\n      newData.payment = data.cost * data.maxPaymentsPercent\r\n    }\r\n\r\n    // Если проценты меньше допустимых значений \r\n    if (newData.paymentsPercent < data.minPaymentsPercent) {\r\n      newData.paymentsPercent = data.minPaymentsPercent\r\n      newData.payment = data.cost * data.minPaymentsPercent\r\n    }\r\n\r\n  }\r\n\r\n\r\n  // При изменении слайдера возвращает нецелое число для последующего подсчета процентов\r\n  if (newData.onUpdate === UPDATE_EVENTS.SLIDER_PAYMENT) {\r\n    newData.paymentsPercent = newData.paymentsPercent / 100\r\n    // Синхронизируем slider с input\r\n    newData.payment = data.cost * newData.paymentsPercent\r\n\r\n    newData.payment = parseInt(newData.payment)\r\n  }\r\n\r\n  // Обновление срока кредита \r\n  if (newData.onUpdate === UPDATE_EVENTS.INPUT_TIME) {\r\n    // При минимальных значениях\r\n    if (newData.time < data.minTime) newData.time = data.minTime\r\n    // При максимальных значениях\r\n    if (newData.time > data.maxTime) newData.time = data.maxTime\r\n  }\r\n\r\n  data = { ...data, ...newData };\r\n  Logger.success(\"[UPDATED MODEL DATA]\", data);\r\n}\r\n\r\nexport { getData, setDate };\r\n\r\n","import { UPDATE_FORM_EVENT } from \"./invariable.js\";\r\n\r\nfunction updateModel(element, data) {\r\n  element.dispatchEvent(\r\n    new CustomEvent(UPDATE_FORM_EVENT, {\r\n      bubbles: true,\r\n      detail: { ...data },\r\n    })\r\n  );\r\n}\r\n\r\nexport default updateModel;\r\n","import { UPDATE_EVENTS } from \"../util/invariable.js\";\r\nimport { Logger } from \"../util/logger/Logger.js\";\r\nimport updateModel from \"./../util/updateModel.js\";\r\n\r\nfunction init(getData) {\r\n  // Если не функция, в консоли отобразится ошибка\r\n  if (typeof getData !== \"function\") {\r\n    Logger.error(\"getData должна быть функцией\");\r\n    return;\r\n  }\r\n\r\n  // Получаем все input для дальнейшего использования\r\n  const radioBtns = document.querySelectorAll('input[name=\"program\"]');\r\n  const { base, it, gov, zero } = getData().programs;\r\n\r\n  //Отлавливаем по id значение и меняем на заданные\r\n  document.querySelector(\"#base-value\").value = base;\r\n  document.querySelector(\"#it-value\").value = it;\r\n  document.querySelector(\"#gov-value\").value = gov;\r\n  document.querySelector(\"#zero-value\").value = zero;\r\n\r\n  // Отлавливаем по id текст и при помощи innerText меняем на заданные\r\n  document.querySelector(\"#base-text\").textContent = base * 100 + \"%\";\r\n  document.querySelector(\"#it-text\").textContent = it * 100 + \"%\";\r\n  document.querySelector(\"#gov-text\").textContent = gov * 100 + \"%\";\r\n  document.querySelector(\"#zero-text\").textContent = zero * 100 + \"%\";\r\n\r\n  // Используем метод forEach и на каждой итерации(на каждую кнопку)будем отлавливать событие\r\n  radioBtns.forEach((radioBtn) => {\r\n    // Отлавливаем событие\r\n    radioBtn.addEventListener(\"change\", function () {\r\n      Logger.info(this.id);\r\n\r\n      updateModel(this, {\r\n        selectedProgram: parseFloat(this.value),\r\n        onUpdate: UPDATE_EVENTS.RADIO_PROGRAM,\r\n        // id хранит название программы которую выбирает пользователь\r\n        id: this.id,\r\n      });\r\n    });\r\n  });\r\n}\r\n\r\nexport default init;\r\n","/**\r\n * Округляет число до целого\r\n * 872.2737572636586 => 872\r\n * 872.00472898536 => 872\r\n * 872.0255898536 => 872\r\n */\r\n\r\nexport function roundNumber(number, locale = \"ru-RU\") {\r\n  const formatter = Intl.NumberFormat(locale, {\r\n    style: \"currency\",\r\n    currency: \"RUB\",\r\n    maximumFractionDigits: 0,\r\n  })\r\n\r\n  return formatter.format(number);\r\n}\r\n","import { roundNumber } from '../util/roundNumber.js';\r\n\r\nfunction computation(getData) {\r\n  const data = getData();\r\n\r\n  // Количество месяцев\r\n  const months = data.time * 12\r\n\r\n  // Сумма кредита\r\n  const totalCost = data.cost - data.payment\r\n\r\n  // Месячная ставка\r\n  const mothRate = data.selectedProgram / 12\r\n\r\n  // Общая ставка\r\n  const generalRate = (1 + mothRate) ** months\r\n\r\n  // Ежемесячный платеж\r\n  const totalMonthPayment = (totalCost * mothRate * generalRate) / (generalRate - 1)\r\n\r\n  // Переплата\r\n  const totalOverpayment = totalMonthPayment * months - totalCost\r\n\r\n  // Процентная ставка\r\n  document.querySelector(\"#total-percent\").textContent = `${data.selectedProgram * 100}%`;\r\n\r\n  document.querySelector(\"#total-month-payment\").textContent = roundNumber(totalMonthPayment);\r\n  document.querySelector(\"#total-cost\").textContent = roundNumber(totalCost);\r\n  document.querySelector(\"#total-overpayment\").textContent = roundNumber(totalOverpayment);\r\n}\r\n\r\nexport default computation;\r\n","function updateMinPercents(minPaymentsPercent) {\r\n  document.querySelector(\"#percents-from\").textContent =\r\n    minPaymentsPercent * 100 + \"%\";\r\n}\r\n\r\nexport { updateMinPercents };\r\n","import { Logger } from \"./logger/Logger.js\";\r\n\r\nfunction form(getData) {\r\n  const data = getData()\r\n\r\n  const openFormBtn = document.querySelector(\"#openFormBtn\")\r\n  const orderForm = document.querySelector(\"#orderForm\")\r\n  const submitFormBtn = document.querySelector(\"#submitFormBtn\")\r\n\r\n  openFormBtn.addEventListener(\"click\", function () {\r\n    orderForm.classList.remove(\"none\")\r\n    openFormBtn.classList.add(\"none\")\r\n  })\r\n\r\n  orderForm.addEventListener(\"submit\", function (event) {\r\n    event.preventDefault();\r\n\r\n    // Собираем данные с формы перед disable\r\n    const formData = new FormData(orderForm)\r\n\r\n    // Disable для кнопки и input\r\n    submitFormBtn.setAttribute(\"disabled\", true)\r\n    submitFormBtn.textContent = \"Заявка отправляется...\"\r\n    Logger.info(\"Application is sent...\");\r\n\r\n    orderForm.querySelectorAll(\"input\").forEach(function (input) {\r\n      input.setAttribute(\"disabled\", true)\r\n    });\r\n\r\n\r\n    fetchData()\r\n    async function fetchData() {\r\n      let url = checkOnUrl(document.location.href);\r\n\r\n      // Функция убирающая index.html если он есть \r\n      function checkOnUrl(url) {\r\n        let urlArrayDot = url.split('.');\r\n\r\n        if (urlArrayDot[urlArrayDot.length - 1] === 'html') {\r\n          urlArrayDot.pop();\r\n          let newUrl = urlArrayDot.join('.');\r\n          let urlArraySlash = newUrl.split('/');\r\n          urlArraySlash.pop();\r\n          newUrl = urlArraySlash.join('/') + '/';\r\n          return newUrl;\r\n        }\r\n        return url;\r\n      }\r\n\r\n      // Делаем запрос \r\n      const response = await fetch(url + 'mail.php', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          form: {\r\n            name: formData.get('name'),\r\n            email: formData.get('email'),\r\n            phone: formData.get('phone'),\r\n          },\r\n          data,\r\n        }),\r\n      });\r\n\r\n      // Получаем результат запроса \r\n      const result = await response.text()\r\n\r\n      submitFormBtn.removeAttribute(\"disabled\", true)\r\n      submitFormBtn.innerText = \"Оформить заявку\"\r\n\r\n      orderForm.querySelectorAll(\"input\").forEach(function (input) {\r\n        input.removeAttribute(\"disabled\", true)\r\n      });\r\n\r\n      // Очищаем поля формы\r\n      orderForm.reset();\r\n      orderForm.classList.add('none');\r\n\r\n      // На основе ответа от сервера показываем сообщения об Успехе или Ошибке\r\n      if (result === 'SUCCESS') {\r\n        document.getElementById('success').classList.remove('none');\r\n      } else {\r\n        document.getElementById('error').classList.remove('none');\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport default form","import { UPDATE_EVENTS } from \"../../util/invariable.js\";\r\nimport updateModel from \"../../util/updateModel.js\";\r\n\r\nfunction init(getData) {\r\n  const input = document.querySelector(\"#input-cost\");\r\n\r\n  const { minPrice, maxPrice, cost } = getData();\r\n\r\n  const settingCleave = {\r\n    numeral: true,\r\n    numeralThousandsGroupStyle: \"thousand\",\r\n    delimiter: \" \",\r\n  };\r\n\r\n  const cleaveInput = new Cleave(input, settingCleave);\r\n  // setRawValue устанавливает базовое значение, используется библиотекой\r\n  cleaveInput.setRawValue(cost);\r\n\r\n  // Событие добавляющее ошибку при неверном минимальном и максимальном значении\r\n  input.addEventListener(\"input\", function () {\r\n    // getRawValue возвращает записанное значение, используется библиотекой\r\n    const value = parseInt(cleaveInput.getRawValue());\r\n\r\n    if (value < minPrice || value > maxPrice) {\r\n      input.closest(\".param__details\").classList.add(\"param__details--error\");\r\n    }\r\n\r\n    if (value >= minPrice && value <= maxPrice) {\r\n      input\r\n        .closest(\".param__details\")\r\n        .classList.remove(\"param__details--error\");\r\n    }\r\n\r\n    // Обновить модель\r\n    updateModel(input, {\r\n      cost: parseInt(cleaveInput.getRawValue()),\r\n      onUpdate: UPDATE_EVENTS.INPUT_COST,\r\n    });\r\n  });\r\n\r\n  // Событие при ошибке возвращает минимальное и максимальное значение\r\n  input.addEventListener(\"change\", function () {\r\n    const value = parseInt(cleaveInput.getRawValue());\r\n\r\n    if (value < minPrice) {\r\n      input\r\n        .closest(\".param__details\")\r\n        .classList.remove(\"param__details--error\");\r\n      cleaveInput.setRawValue(minPrice);\r\n    }\r\n\r\n    if (value > maxPrice) {\r\n      input\r\n        .closest(\".param__details\")\r\n        .classList.remove(\"param__details--error\");\r\n      cleaveInput.setRawValue(maxPrice);\r\n    }\r\n    // Обновить модель\r\n    updateModel(input, {\r\n      cost: parseInt(cleaveInput.getRawValue()),\r\n      onUpdate: UPDATE_EVENTS.INPUT_COST,\r\n    });\r\n  });\r\n  return cleaveInput;\r\n}\r\n\r\nexport default init;\r\n","import { UPDATE_EVENTS } from \"../../util/invariable.js\";\r\nimport updateModel from \"../../util/updateModel.js\";\r\n\r\nfunction init(getData) {\r\n  const slider = document.querySelector(\"#slider-cost\");\r\n  const { cost, minPrice, maxPrice } = getData();\r\n\r\n  noUiSlider.create(slider, {\r\n    start: cost,\r\n    connect: \"lower\",\r\n    tooltips: true,\r\n    step: 100000,\r\n    range: {\r\n      min: minPrice,\r\n      \"1%\": [400000, 100000],\r\n      \"50%\": [10000000, 500000],\r\n      max: maxPrice,\r\n    },\r\n\r\n    format: wNumb({\r\n      decimals: 0,\r\n      thousand: \" \",\r\n      suffix: \" \",\r\n    }),\r\n  });\r\n\r\n  // Метод on позволяет следить за событиями\r\n  slider.noUiSlider.on(\"slide\", function () {\r\n    // Функция get() используется библиотекой noUiSlider и возвращает значение слайдера\r\n    const sliderValues = slider.noUiSlider.get();\r\n\r\n    // Используем метод split для возвращения 0 строки в массиве\r\n    const firstValue = sliderValues.split(\".\")[0];\r\n\r\n    /* Парсим значение слайдера для дальнейшего возврата\r\n     при помощи replace с заменой пробелов, удаляем пробелы при помощи регулярных выражений */\r\n    const removeSpaces = parseInt(firstValue.replace(/ /g, \"\"));\r\n\r\n    // Обновление базовых значений\r\n    updateModel(slider, {\r\n      cost: removeSpaces,\r\n      onUpdate: UPDATE_EVENTS.SLIDER_COST,\r\n    });\r\n  });\r\n\r\n  return slider;\r\n}\r\n\r\nexport default init;\r\n","import { UPDATE_EVENTS } from \"../../util/invariable.js\";\r\nimport updateModel from \"../../util/updateModel.js\";\r\n\r\nfunction init(getData) {\r\n  const input = document.querySelector(\"#input-downpayment\");\r\n  const { payment, getMinPayment, getMaxPayment } = getData();\r\n\r\n  const settingCleave = {\r\n    numeral: true,\r\n    numeralThousandsGroupStyle: \"thousand\",\r\n    delimiter: \" \",\r\n  };\r\n\r\n  const cleaveInput = new Cleave(input, settingCleave);\r\n  // setRawValue устанавливает базовое значение, используется библиотекой\r\n  cleaveInput.setRawValue(payment);\r\n\r\n  // Событие добавляющее ошибку при неверном минимальном и максимальном значении\r\n  input.addEventListener(\"input\", function () {\r\n    const minPayment = getMinPayment();\r\n    const maxPayment = getMaxPayment();\r\n\r\n    const value = parseInt(cleaveInput.getRawValue());\r\n    // Проверка на мин и макс сумму первого платежа\r\n    if (value < minPayment || value > maxPayment) {\r\n      input.closest(\".param__details\").classList.add(\"param__details--error\");\r\n    }\r\n\r\n    if (value >= minPayment && value <= maxPayment) {\r\n      input\r\n        .closest(\".param__details\")\r\n        .classList.remove(\"param__details--error\");\r\n    }\r\n\r\n    // Обновить модель\r\n    updateModel(input, {\r\n      payment: value,\r\n      onUpdate: UPDATE_EVENTS.INPUT_PAYMENT,\r\n    });\r\n  });\r\n\r\n  // Событие при ошибке возвращает минимальное и максимальное значение\r\n  input.addEventListener(\"change\", function () {\r\n    const minPayment = getMinPayment();\r\n    const maxPayment = getMaxPayment();\r\n\r\n    const value = parseInt(cleaveInput.getRawValue());\r\n\r\n    if (value < minPayment) {\r\n      input\r\n        .closest(\".param__details\")\r\n        .classList.remove(\"param__details--error\");\r\n      cleaveInput.setRawValue(minPayment);\r\n    }\r\n\r\n    if (value > maxPayment) {\r\n      input\r\n        .closest(\".param__details\")\r\n        .classList.remove(\"param__details--error\");\r\n      cleaveInput.setRawValue(maxPayment);\r\n    }\r\n\r\n    updateModel(input, {\r\n      payment: value,\r\n      onUpdate: UPDATE_EVENTS.INPUT_PAYMENT,\r\n    });\r\n  });\r\n  return cleaveInput;\r\n}\r\n\r\nexport default init;\r\n","export function debounce(func, delay = 150) {\r\n  // Переменная для хранения отложенного таймаута\r\n  let timer;\r\n\r\n  // Возвращаем функцию, которая будет замыкаться на timer\r\n  return function (...args) {\r\n    // Создаём функцию, которая содержит данные от передаваемой функции\r\n    // Для последующего вызова. В том случае, если передаются и аргумент -- передаём их\r\n    const debounceCallbacks = () => func(...args);\r\n\r\n    // Если в timer записана функция, и debounce вызвана, значит функцию вызывать нельзя\r\n    // Мы должны её перезаписать, а для этого очистить память -- удалить предыдущий таймаут\r\n    clearTimeout(timer);\r\n\r\n    // Записываем новый таймаут с функцией для отложенного вызова\r\n    timer = setTimeout(debounceCallbacks, delay);\r\n  };\r\n}\r\n","import { UPDATE_EVENTS } from \"../../util/invariable.js\";\r\nimport updateModel from \"../../util/updateModel.js\";\r\n\r\nimport { debounce } from \"../../util/debounce/debounce.js\"\r\n\r\nfunction init(getData) {\r\n  const slider = document.querySelector(\"#slider-downpayment\");\r\n  const { paymentsPercent, minPaymentsPercent, maxPaymentsPercent } = getData();\r\n\r\n  noUiSlider.create(slider, {\r\n    start: paymentsPercent * 100,\r\n    connect: \"lower\",\r\n    tooltips: true,\r\n    step: 1,\r\n    range: {\r\n      min: minPaymentsPercent * 100,\r\n      max: maxPaymentsPercent * 100,\r\n    },\r\n\r\n    format: wNumb({\r\n      decimals: 0,\r\n      thousand: \" \",\r\n      suffix: \" \",\r\n    }),\r\n  });\r\n\r\n  // Создаем функцию для debounce\r\n  const uiSliderUpdate = () => {\r\n    // Функция get() используется библиотекой noUiSlider и возвращает значение слайдера\r\n    const sliderValues = slider.noUiSlider.get();\r\n\r\n    // Используем метод split для возвращения 0 строки в массиве\r\n    const firstValue = sliderValues.split(\".\")[0];\r\n\r\n    /* Парсим значение слайдера для дальнейшего возврата\r\n     при помощи replace с заменой пробелов, удаляем пробелы при помощи регулярных выражений */\r\n    const removeSpaces = parseInt(firstValue.replace(/ /g, \"\"));\r\n\r\n    // Обновление базовых значений\r\n    updateModel(slider, {\r\n      paymentsPercent: removeSpaces,\r\n      onUpdate: UPDATE_EVENTS.SLIDER_PAYMENT,\r\n    });\r\n  }\r\n\r\n  // Вызываем debounce с отложенным временем в 5 миллисекунд\r\n  const debounceUiSlider = debounce(uiSliderUpdate, 5)\r\n\r\n  // Метод on позволяет следить за событиями\r\n  slider.noUiSlider.on(\"slide\", debounceUiSlider);\r\n  return slider;\r\n}\r\n\r\nexport default init;\r\n","import { UPDATE_EVENTS } from \"../../util/invariable.js\";\r\nimport updateModel from \"../../util/updateModel.js\";\r\n\r\nfunction init(getData) {\r\n  const input = document.querySelector(\"#input-term\");\r\n\r\n  const { minTime, maxTime, time } = getData();\r\n\r\n  const settingCleave = {\r\n    numeral: true,\r\n    numeralThousandsGroupStyle: \"thousand\",\r\n    delimiter: \" \",\r\n  };\r\n\r\n  const cleaveInput = new Cleave(input, settingCleave);\r\n  // setRawValue устанавливает базовое значение, используется библиотекой\r\n  cleaveInput.setRawValue(time);\r\n\r\n  // Событие добавляющее ошибку при неверном минимальном и максимальном значении\r\n  input.addEventListener(\"input\", function () {\r\n    // getRawValue возвращает записанное значение, используется библиотекой\r\n    const value = parseInt(cleaveInput.getRawValue());\r\n\r\n    if (value < minTime || value > maxTime) {\r\n      input.closest(\".param__details\").classList.add(\"param__details--error\");\r\n    }\r\n\r\n    if (value >= minTime && value <= maxTime) {\r\n      input\r\n        .closest(\".param__details\")\r\n        .classList.remove(\"param__details--error\");\r\n    }\r\n\r\n    // Обновить модель\r\n    updateModel(input, {\r\n      time: parseInt(cleaveInput.getRawValue()),\r\n      onUpdate: UPDATE_EVENTS.INPUT_TIME,\r\n    });\r\n  });\r\n\r\n  // Событие при ошибке возвращает минимальное и максимальное значение\r\n  input.addEventListener(\"change\", function () {\r\n    const value = parseInt(cleaveInput.getRawValue());\r\n\r\n    if (value < minTime) {\r\n      input\r\n        .closest(\".param__details\")\r\n        .classList.remove(\"param__details--error\");\r\n      cleaveInput.setRawValue(minTime);\r\n    }\r\n\r\n    if (value > maxTime) {\r\n      input\r\n        .closest(\".param__details\")\r\n        .classList.remove(\"param__details--error\");\r\n      cleaveInput.setRawValue(maxTime);\r\n    }\r\n    // Обновить модель\r\n    updateModel(input, {\r\n      time: parseInt(cleaveInput.getRawValue()),\r\n      onUpdate: UPDATE_EVENTS.INPUT_TIME,\r\n    });\r\n  });\r\n  return cleaveInput;\r\n\r\n}\r\n\r\nexport default init;\r\n","import { UPDATE_EVENTS } from \"../../util/invariable.js\";\r\nimport updateModel from \"../../util/updateModel.js\";\r\n\r\nfunction init(getData) {\r\n  const slider = document.querySelector(\"#slider-term\");\r\n  const { time, maxTime, minTime } = getData();\r\n\r\n  noUiSlider.create(slider, {\r\n    start: time,\r\n    connect: \"lower\",\r\n    tooltips: true,\r\n    step: 1,\r\n    range: {\r\n      min: minTime,\r\n      max: maxTime,\r\n    },\r\n\r\n    format: wNumb({\r\n      decimals: 0,\r\n      thousand: \" \",\r\n      suffix: \" \",\r\n    }),\r\n  });\r\n\r\n  // Метод on позволяет следить за событиями\r\n  slider.noUiSlider.on(\"slide\", function () {\r\n    // Функция get() используется библиотекой noUiSlider и возвращает значение слайдера\r\n    const sliderValues = slider.noUiSlider.get();\r\n\r\n    // Используем метод split для возвращения 0 строки в массиве\r\n    const firstValue = sliderValues.split(\".\")[0];\r\n\r\n    /* Парсим значение слайдера для дальнейшего возврата\r\n     при помощи replace с заменой пробелов, удаляем пробелы при помощи регулярных выражений */\r\n    const removeSpaces = parseInt(firstValue.replace(/ /g, \"\"));\r\n\r\n    // Обновление базовых значений\r\n    updateModel(slider, {\r\n      time: removeSpaces,\r\n      onUpdate: UPDATE_EVENTS.SLIDER_TIME,\r\n    });\r\n  });\r\n\r\n  return slider;\r\n}\r\n\r\nexport default init;\r\n","import * as Model from \"../model/model.js\";\r\nimport programs from \"./view/radioPrograms.js\";\r\nimport computation from './util/computation.js'\r\nimport { UPDATE_EVENTS, UPDATE_FORM_EVENT } from \"./util/invariable.js\";\r\nimport { updateMinPercents } from \"./util/utils.js\";\r\nimport { Logger } from \"./util/logger/Logger.js\";\r\nimport applicationForm from \"./util/applicationForm.js\"\r\n\r\n// Стоимость недвижимости\r\nimport costInput from \"./view/choiceOfConditions/costInput.js\";\r\nimport costRange from \"./view/choiceOfConditions/costRange.js\";\r\n\r\n// Первоначальный взнос\r\nimport paymentInput from \"./view/choiceOfConditions/paymentInput.js\";\r\nimport paymentRange from \"./view/choiceOfConditions/paymentRange.js\"\r\n\r\n// Срок кредита \r\nimport timeInput from \"./view/choiceOfConditions/timeInput.js\"\r\nimport timeSlider from \"./view/choiceOfConditions/timeRange.js\"\r\n\r\nfunction initialCalculator() {\r\n  const getData = Model.getData;\r\n  // Инициализация ---------------------\r\n  // Базовые значения\r\n  programs(getData);\r\n\r\n  // Расчет ипотеки на стартовой странице\r\n  computation(getData);\r\n\r\n  // Форма\r\n  applicationForm(getData)\r\n\r\n  // Значения стоимости недвижимости\r\n  const cleaveCost = costInput(getData);\r\n  // Значения слайдера стоимости недвижимости\r\n  const sliderCost = costRange(getData);\r\n\r\n  // Значения первоначального взноса\r\n  const cleavePayment = paymentInput(getData);\r\n  // Значения слайдера первоначального взноса\r\n  const sliderPayment = paymentRange(getData)\r\n\r\n  // Значения срока кредита\r\n  const cleaveTime = timeInput(getData)\r\n  // Значения слайдера срока кредита\r\n  const sliderTime = timeSlider(getData)\r\n\r\n  // ------------------- -------------------\r\n\r\n  document.addEventListener(UPDATE_FORM_EVENT, ({ detail }) => {\r\n    Model.setDate(detail);\r\n    // Обновление всего что связанно с внешним видом формы основываясь на  данных из модели\r\n    updateForm(getData());\r\n\r\n    // Обновление значений процентной ставки на странице\r\n    computation(getData);\r\n  });\r\n\r\n  function updateForm({ onUpdate, cost, payment, minPaymentsPercent, maxPaymentsPercent, paymentsPercent, time }) {\r\n    // Обновление\r\n    // Проценты для программы zero\r\n    if (onUpdate === UPDATE_EVENTS.RADIO_PROGRAM) {\r\n      const range = {\r\n        range: {\r\n          min: minPaymentsPercent * 100,\r\n          max: maxPaymentsPercent * 100,\r\n        }\r\n      }\r\n      updateMinPercents(minPaymentsPercent);\r\n      // При помощи библиотеки (данный способ есть в документации) обновляем минимальное значение\r\n      sliderPayment.noUiSlider.updateOptions(range)\r\n    }\r\n\r\n    // Значение стоимости недвижимости\r\n    if (onUpdate !== UPDATE_EVENTS.INPUT_COST) {\r\n      cleaveCost.setRawValue(cost);\r\n    }\r\n    // Значение стоимости недвижимости слайдера \r\n    if (onUpdate !== UPDATE_EVENTS.SLIDER_COST) {\r\n      sliderCost.noUiSlider.set(cost);\r\n    }\r\n\r\n    // Значение первоначального взноса \r\n    if (onUpdate !== UPDATE_EVENTS.INPUT_PAYMENT) {\r\n      cleavePayment.setRawValue(payment)\r\n    }\r\n    // Значение первоначального взноса слайдера \r\n    if (onUpdate !== UPDATE_EVENTS.SLIDER_PAYMENT) {\r\n      sliderPayment.noUiSlider.set(paymentsPercent * 100)\r\n    }\r\n\r\n    // Значение срока кредита \r\n    if (onUpdate !== UPDATE_EVENTS.INPUT_TIME) {\r\n      cleaveTime.setRawValue(time)\r\n    }\r\n    // Значение срока кредита слайдера\r\n    if (onUpdate !== UPDATE_EVENTS.SLIDER_TIME) {\r\n      sliderTime.noUiSlider.set(time)\r\n    }\r\n  }\r\n\r\n  Logger.info(\"CALCULATOR LOADED!\");\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", initialCalculator);\r\n"]}